/*
 * File: WordFrequency.cpp
 * -----------------------
 * This program computes the frequency of words in a text file.  This
 * version of the program uses a functor to eliminate the most common
 * words from the listing.
 */

#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cctype>
#include "filelib.h"
#include "lexicon.h"
#include "map.h"
#include "strlib.h"
#include "vector.h"
using namespace std;

/* Function prototypes */

void countWords(istream & stream, Map<string,int> & wordCounts);
void extractWords(string line, Vector<string> & words);

/*
 * Class: ShowCountsExcluding
 * --------------------------
 * This class implements a functor for the Map class that prints out
 * entries containing a word from the map and its corresponding count,
 * unless that word appears in the exclude list.  The typical usage
 * pattern looks like this:
 *
 *    wordCounts.mapAll(ShowCountsExcluding("CommonWords.txt"));
 */

class ShowCountsExcluding {

public:

/*
 * Constructor: ShowCountsExcluding
 * Usage: ShowCountsExcluding(filename);
 * -------------------------------------
 * Creates a functor object that makes it possible to eliminate a set
 * of words from the word count list.  The constructor creates a
 * Lexicon object from the specified file and then uses that lexicon
 * to test the words as they are passed to the function operator.
 */

   ShowCountsExcluding(string filename) {
      exclude = Lexicon(filename);
   }

/*
 * Operator: ()
 * ------------
 * This operator defines the behavior of this object when it is called
 * as a function.  The call is automatically generated by the mapAll
 * method in the Map class.
 */

   void operator()(string word, int count) {
      if (!exclude.contains(word)) {
         cout << left << setw(15) << word
              << right << setw(5) << count << endl;
      }
   }

private:

/* Instance variables */

   Lexicon exclude;         /* Lexicon of words to exclude from the listing */

};

/* Main program */

int main() {
   ifstream infile;
   Lexicon commonWords("CommonWords.txt");
   Map<string,int> wordCounts;
   promptUserForFile(infile, "Input file: ");
   countWords(infile, wordCounts);
   infile.close();
   wordCounts.mapAll(ShowCountsExcluding("CommonWords.txt"));
   return 0;
}

/*
 * Function: countWords
 * Usage: countWords(stream, wordCounts);
 * --------------------------------------
 * Counts the words in the input stream, updating the counts in
 * the wordCounts map for each word in the stream.
 */

void countWords(istream & stream, Map<string,int> & wordCounts) {
   Vector<string> lines, words;
   readEntireFile(stream, lines);
   foreach (string line in lines) {
      extractWords(line, words);
      foreach (string word in words) {
         wordCounts[toLowerCase(word)]++;
      }
   }
}

/*
 * Function: displayEntry
 * Usage: displayEntry(key, value);
 * --------------------------------
 * Displays the key and value for a single entry in the map.
 */

void displayEntry(string key, int value) {
   cout << left << setw(15) << key
        << right << setw(5) << value << endl;
}

# include "extractWords-code.h"
